#!/bin/bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

function exit_error() {
    local msg="$1"; shift
    local code="$1"; shift
    local dir="$1"; shift
    if [ -z "$code" ]; then
        code=1
    fi
    if [ -z "$dir" ]; then
        dir="."
    fi
    echo '{"recipient":{"type":"all","id":"all"},"user-object":{"error": '"$(echo -e "$msg" | jq -Rs .)"'}}' >"$dir/msgs/tx/error"
    echo "$msg"
    exit $code
}

function dump_runtime() {
    echo env:
    env
    echo
    echo "args; $@"
    echo
    echo "pwd:"
    /bin/pwd
    echo
    echo "ls -alR:"
    ls -alR
    echo
    echo "hostname: `hostname`"
    echo
    echo filesystems:
    mount
    echo
    echo "ls -l /dev/hugepages"
    /bin/ls -l /dev/hugepages
    echo
    echo "/proc/meminfo"
    cat /proc/meminfo
    echo
    echo DPDK devices:
    if ! command -v dpdk-devbind.py >& /dev/null; then
        dpdk-devbind -s
    else
        dpdk-devbind.py -s
    fi
    echo
    echo netdevs:
    ls -l /sys/class/net
    echo
    echo ip a:
    ip a
    echo
    echo "per-node-hugepages:"
    for node in $(ls -1d /sys/devices/system/node/node[0-9]*); do
        node_name=$(basename ${node})
        echo -e "\nNUMA Node Name: ${node_name}"
        if pushd ${node}/hugepages > /dev/null; then
            for hugepage in $(ls -1d *); do
                page_size=$(echo "${hugepage}" | awk -F- '{ print $2 }')
                echo -e "\nHuge Page Size: ${page_size}\n"
                if pushd ${hugepage} > /dev/null; then
                    more * | tee /dev/null
                    popd > /dev/null
                fi
            done
            popd > /dev/null
        fi
    done
}

function validate_label() {
    id=`echo $RS_CS_LABEL | awk -F- '{print $2}'`
    re='^[1-9][0-9]*$'
    if [[ ! "$id" =~ $re ]]; then
        echo "ID must a be a positive interger, exiting"
        exit 1
    fi
}

function validate_sw_prereqs() {
    local prereq
    local missing=""

    echo "Checking for software dependencies:"
    while [ -n "${1}" ]; do
        prereq="${1}"
        shift

        if ! command -v ${prereq}; then
            echo "Missing: ${prereq}"
            missing+=" ${prereq}"
        fi
    done

    if [ -n "${missing}" ]; then
        echo "ERROR: could not find prereq(s): ${missing}"
        exit 1
    fi
}

function validate_clocksource() {
    local clocksource clocksource_dir available_clocksources

    clocksource_dir="/sys/devices/system/clocksource/clocksource0"

    if pushd ${clocksource_dir} > /dev/null; then
        clocksource=$(cat current_clocksource)
        available_clocksources=$(cat available_clocksource)
        supported_clocksources="tsc kvm-clock hyperv_clocksource_tsc_page arch_sys_counter"

        popd > /dev/null

        case "${clocksource}" in
            "tsc"|"kvm-clock"|"hyperv_clocksource_tsc_page"|"arch_sys_counter")
                echo "Verified clocksource is ${clocksource}"
                return 0
                ;;
            *)
                echo "ERROR: Unsupported clocksource.  Current clocksource is ${clocksource}.  Available clocksources are: ${available_clocksources}.  Supported clocksources are: ${supported_clocksources}"
                return 2
                ;;
        esac
    else
        echo "ERROR: Could not pushd to ${clocksource_dir}"
        return 1
    fi
}

function cgroup2()
{
    set -x
    cmd=$(mount | grep cgroup | awk '{ print $1 }')
    if [[ "$cmd" =~ "cgroup2" ]]; then
       echo "cgroup_v2 is present"
       return 1
     fi
    return 0
}

function show_balance()
{
    set -x
    local cpulist="$1"; shift
    dmesg | grep -i sched-domain
    if [[ cgroup_v2 ]]; then
        grep . /sys/fs/cgroup/cgroup.subtree_control
    else
        for cpu in `echo ${cpulist} | sed -e 's/,/ /g'`; do
            for file in $(find /proc/sys/kernel/sched_domain/cpu$cpu -name flags -print); do
                grep . $file
            done
       done
    fi
}

function disable_balance_v1()
{
    set -x
    local cpulist="$1"; shift
    local cpu=""
    local file=
    local flags_cur=
    for cpu in `echo ${cpulist} | sed -e 's/,/ /g'`; do
        for file in $(find /proc/sys/kernel/sched_domain/cpu$cpu -name flags -print); do
            flags_cur=$(cat $file)
            flags_cur=$((flags_cur & 0xfffe))
            echo $flags_cur > $file
        done
    done
}

function enable_balance_v1()
{
    set -x
    local cpulist="$1"; shift
    local cpu=""
    local file=
    local flags_cur=
    for cpu in `echo ${cpulist} | sed -e 's/,/ /g'`; do
        for file in $(find /proc/sys/kernel/sched_domain/cpu$cpu -name flags -print); do
            flags_cur=$(cat $file)
            flags_cur=$((flags_cur | 0x1))
            echo $flags_cur > $file
        done
    done
}

function enable_balance_v2()
{
    set -x
    echo member > /sys/fs/cgroup/crucible_no_balance/cpuset.cpus.partition
    echo -cpuset > /sys/fs/cgroup/cgroup.subtree_control
    rmdir /sys/fs/cgroup/crucible_no_balance
}

function disable_balance_v2()
{
    set -x
    local cpulist="$1"; shift
    echo +cpuset > /sys/fs/cgroup/cgroup.subtree_control
    mkdir -p /sys/fs/cgroup/crucible_no_balance
    echo $cpulist > /sys/fs/cgroup/crucible_no_balance/cpuset.cpus
    echo isolated > /sys/fs/cgroup/crucible_no_balance/cpuset.cpus.partition
}

function enable_balance()
{
    set -x
    local cpulist="$1"; shift
    local debug="$1"; shift
    echo Y > /sys/kernel/debug/sched/verbose
    if [[ cgroup_v2 ]]; then
        enable_balance_v2
    else
        enable_balance_v1 $cpulist
    fi
    echo N > /sys/kernel/debug/sched/verbose
}

function disable_balance()
{
    set -x
    local cpulist="$1"; shift
    local debug="$1"; shift
    echo Y > /sys/kernel/debug/sched/verbose
    if [[ cgroup_v2 ]]; then
        disable_balance_v2 $cpulist
    else
        disable_balance_v1 $cpulist
    fi
    echo N > /sys/kernel/debug/sched/verbose
}
